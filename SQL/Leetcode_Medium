### 177 Nth Highest Salary (Medium)
select * from employee;
# Question --> Get the n highest salary
# Example: 4th highest --> offset = (4-1) = 3
select distinct Salary from employee order by Salary desc limit 1 offset 3;
 
### 178 Rank Salary (Medium)
select * from employee;
# Q --> Write a SQL query to rank salary. 
# --- If there is a tie between two salaries, both should have the same ranking. 
# --- Note that after a tie, the next ranking number should be the next consecutive integer value. In other words, there should be no "holes" between ranks.
# --- Example: No gap after ranks 2 -> 1-2-2-3 not 1-2-2-4
# Method 1:
select a.Name, a.Salary, count(distinct b.Salary) as rank from employee as a, employee as b where a.Salary<=b.Salary group by a.Name, a.Salary order by rank;
# Method 2:
select a.Name, a.Salary, (select count(distinct b.Salary) as count from employee as b where a.Salary<=b.Salary) as rank from employee as a order by rank;
 
### 180 Consecutive Numbers (Mediun)
 select * from logs;
 # Q --> Find all numbers that appear at least three times consecutively.
 # Method 1:
 select a.Id, a.Num from logs as a where a.Num = (select b.Num from logs as b where b.Id = a.Id+1) = (select c.Num from logs as c where c.Id = a.Id+2);
 
 # Method 2:
 # join three times need to use "left join" instead of "left join"
 select distinct a.Num as ConsecutiveNums from logs as a inner join logs as b inner join logs as c on a.Id+1=b.Id and a.Id+2=c.Id where a.Num=b.Num=c.Num;

# Method 3:
# Step 1:
Select id, Num, (@rank:= IF(@pre=Num, @rank+1, 1)) AS rank, @pre:=Num AS Previous from logs, (SELECT @pre:= NULL,@rank:=0) as a;
 # Step 2:
 select distinct c.Num, c.rank as ConsecutiveNums from 
(Select id, Num, (@rank:= IF(@pre=Num, @rank+1, 1)) AS rank, @pre:=Num AS Previous from logs, (SELECT @pre:= NULL,@rank:=0) as a) as c
where c.rank >= 3;
# Note: remember the "distinct"

### 184 Department Highest Salary (Mediun)
select * from employee; 
# Q --> Find employees who have the highest salary in each of the departments.
select Name, Salary, Dept_Id from employee where (Salary, Dept_Id) in (select max(Salary) as max, Dept_Id from employee group by Dept_Id);

### 534 Game Play Analysis III (Medium)
select * from game;
# Q -->  Reports for each player and date, how many games played so far by the player.
select a.*, (select sum(b.games_played) from game as b where b.event_date <= a.event_date and a.player_id = b.player_id) as cumulated_games_played from game as a;

### 550 Game Play Analysis IV (Medium)
select * from game;
# Q --> Reports the fraction of players that logged in again on the day after the day they first logged in, rounded to 2 decimal places. 
# --- Fraction equal = # of players that logged in for at least two consecutive days starting from their first login date / total number of players.
select round(a.con2 / b.total,2) as fraction from 
(select count(distinct player_id) as con2 from game where (player_id,event_date) in (select player_id, min(event_date) + interval 1 day from game group by player_id)) as a,
(select count(distinct player_id) as total from game) as b;

# 570 Managers with at Least 5 Direct Reports (Medium)
select * from employee;
# Q --> Finds out managers with at least 3 direct report
select b.Name from employee as a inner join employee as b on a.Mgr_Id=b.Emp_Id group by b.Name having count(*)>=3;

# 574 Winning Candidate (Medium)
select * from candidate; 
select * from vote;
# Question: Find the name of the winning candidate, the above example will return the winner B --- Assume there is at most one winning candidate.
select Name from candidate where Id = (select CandidateId from vote group by CandidateId order by count(*) desc limit 1);

### 578 Get Highest Answer Rate Question (Medium)
select * from survey_log;
# Question: Identify the question which has the highest answer rate.
# --- Answer rate = # of answer / $ of show
# --- question 285 has answer rate 1/1, while question 369 has 0/1 answer rate, so output 285.
# Method 1:
select a.question_id as survey_log from
(select question_id, 
SUM(CASE WHEN action='answer' THEN 1 ELSE 0 END) AS num_answer,
SUM(CASE WHEN action='show' THEN 1 ELSE 0 END) AS num_show
from survey_log group by question_id) as a
order by (num_answer / num_show) DESC limit 1;

# Method 2:
select question_id as survey_log from survey_log group by question_id
order by SUM(IF(action='answer', 1, 0)) / SUM(IF(action='show', 1, 0)) desc limit 1;

### 580 Count Student Number in Departments (Medium)
select * from student;
select * from department2;
# Q --> Print the respective department name and number of students majoring in each department for all departments (even ones with no current students).
# --- Sort your results by descending number of students
# --- If two or more departments have the same number of students, then sort those departments alphabetically by department name.
select a.dept_name, count(distinct b.student_id) as student_number from department2 as a left join student as b on a.dept_id=b.dept_id
group by a.dept_name order by 2 desc;

### 585 Investments in 2016 (Medium)
select * from insurance;
# Question: Print the sum of all total investment values in 2016 (TIV_2016), for all policy holders who meet the following criteria:
# --- Have the same TIV_2015 value as one or more other policyholders.
# --- Are not located in the same city as any other policyholder (i.e.: the (latitude, longitude) attribute pairs must be unique).
select SUM(TIV_2016) as TIV_2016 from insurance
where TIV_2015 in (select TIV_2015 from insurance group by TIV_2015 HAVING COUNT(*) > 1)
and (LAT, LON) in (select LAT, LON from insurance group by LAT, LON HAVING COUNT(*) = 1);

### 602 Friend Requests II: Who Has the Most Friends (Medium)
select * from request_accepted; 
# Question: Find the the people who has most friends and the most friends number. 
# There is only 1 people having the most friends.
# The friend request could only been accepted once -> no multiple records with the same requester_id and accepter_id value.                    
select requester_id as id, count(distinct accepter_id) as count 
from (select requester_id, accepter_id from request_accepted 
		  union all 
          select accepter_id, requester_id from request_accepted) a 
group by requester_id order by 2 desc limit 1;

### 608 Tree Node (Mediun)
select * from tree;
# Question: Print the node id and the type of the node. Sort your output by the node id. 
# --- Each node in the tree can be one of three types -> Leaf / Root / Inner
# --- Node '1' is root node, because its parent node is NULL and it has child node '2' and '3'.
# --- Node '2' is inner node, because it has parent node '1' and child node '4' and '5'.
# --- Node '3', '4' and '5' is Leaf node, because they have parent node and they don't have child node.
# Method 1:
# step one:
select a.*, b.p_id from tree as a left join tree as b on a.id=b.p_id;

# step two:
select distinct a.id,
(case when a.p_id is null then "Root" when b.p_id is null then "Leaf" else "Inner" end) as Type
from tree as a left join tree as b on a.id=b.p_id;

# Method 2: -> we can get Inner directly if it includes in p_id
select id, if(ISNULL(p_id), 'Root', if(id in (select p_id from tree), 'Inner', 'Leaf')) as Type from tree;

### 612 Shortest Distance in a Plane (Medium)
select * from point_2d;
# Question: Find the shortest distance between these points rounded to 2 decimals.
select min(shortest) from (
select round( power( power((a.x-b.x),2) + power((a.y-b.y),2) , 1/2), 2) as shortest 
from point_2d as a inner join point_2d as b) c where shortest != 0;

### 614 Second Degree Follower (Medium)
select * from follow;
# Question: Get the amount of each followerâ€™s follower if he/she has one. -> group by follower not followee
# Both B and D exist in the follower list, when as a followee, B's follower is C and D, and D's follower is E. A does not exist in follower list.
# Step one:
select a.*, b.* from follow as a left join follow as b on a.follower=b.followee;
# Step two:
select a.follower, count(distinct b.follower) as num from follow as a left join follow as b on a.follower=b.followee where b.followee is not null
group by a.follower;

### 626. Exchange Seats (Medium)
select * from seat;
# Question: Change seats for the adjacent people. (Ignore the column: "free")
# When id = even -> id - 1; when id = odd -> id +1
# For the query, make sure it works for table 'seat2' as well -> when count(*) is odd, keep the last id

# Method 1
select b.seat_id-1 as seat_id, b.name from seat as a, seat as b where a.seat_id+1 = b.seat_id and mod(a.seat_id,2)=1
union all
select b.seat_id+1 as seat_id, b.name from seat as a, seat as b where a.seat_id-1 = b.seat_id and mod(a.seat_id,2)=0
union all
select distinct a.seat_id as seat_id, a.name from seat as a, seat as b where mod(a.seat_id,2)=1 and a.seat_id = (select count(*) from seat);

# Method 2:
select (case 
	when mod(seat_id,2)=0 then seat_id-1
	when mod(seat_id,2)=1 and seat_id = (select count(*) from seat) then seat_id
	else seat_id+1 end) as seat_id, name 
from seat order by 1;

# We can put mod(seat_id,2) to the front of case
select (case mod(seat_id,2) 
when 0 then seat_id-1 
when 1 and seat_id=(select count(*) from seat) then seat_id 
else seat_id+1 end) as seat_id, name from seat order by 1;

### 1045 Customers Who Bought All Products (Medium)
select * from customer2;
select * from product;
# Question: Provides the customer ids from the Customer table that bought ALL the products in the Product table.
select customer_id from customer2
group by customer_id
having count(distinct product_key) = (select count(*) from product);

### 1070 Product Sales Analysis III (Medium)
select * from sales;
# Question: Selects the product id, year, quantity, and price for the first year of every product sold.
select product_id, year as first_year, quantity, price from sales 
where (product_id, year) in (select product_id, min(year) from sales group by product_id);

### 1077 Project Employees III (Medium)
select * from project4;
select * from employee4;
# Question: Reports the most experienced employees in each project.
select a.project_id, a.employee_id from project4 as a left join employee4 as b on a.employee_id=b.employee_id
where (a.project_id,b.experience_years) in
(select a.project_id, max(b.experience_years) from project4 as a left join employee4 as b on a.employee_id=b.employee_id group by a.project_id)
order by 1;

### 1098 Unpopular Books (Medium)
select * from books;
select * from orders_book;
# Question: Reports the books that have sold less than 10 copies in the last year
# Excluding books that have been available for less than 1 month from today. 
# Assume today is 2019-06-23.
# Method 1:
select a.book_id, a.name from books as a  left join orders_book as b on a.book_id = b.book_id and 
TIMESTAMPDIFF(year, b.dispatch_date,"2019-06-23") = 0 where TIMESTAMPDIFF(month, a.available_from,"2019-06-23")>1 group by a.book_id, a.name
having  ifnull(sum(quantity),0) < 10;

# Method 2:
# Step 1:
select a.*,b.* from books as a left join orders_book as b 
on a.book_id=b.book_id where TIMESTAMPDIFF(month, a.available_from,"2019-06-23")>1; # Keep the data if the book is available for more than a month
# Step 2:
select a.book_id,a.name from books as a left join orders_book as b 
on a.book_id=b.book_id where TIMESTAMPDIFF(month, a.available_from,"2019-06-23")>1
group by a.book_id, a.name 
having sum(if(TIMESTAMPDIFF(year, b.dispatch_date,"2019-06-23")=0,b.quantity,0)) < 10;
# Note: we want to keep the books that have no any sales in the last year

# Method 3:
# Step 1:
SELECT * FROM books AS B LEFT JOIN orders_book AS O 
ON O.book_id = B.book_id AND O.dispatch_date BETWEEN '2018-06-23' AND '2019-06-23' # add an "and" instead of "where" right after the join will help creating more nulls
WHERE DATEDIFF('2019-06-23', B.available_from) > 30;
# Step 2:
SELECT B.book_id, B.name FROM books AS B LEFT JOIN orders_book AS O
ON O.book_id = B.book_id AND O.dispatch_date BETWEEN '2018-06-23' AND '2019-06-23' WHERE DATEDIFF('2019-06-23', B.available_from) > 30
GROUP BY B.book_id, B.name
HAVING SUM(IF(O.quantity IS NULL, 0, O.quantity)) < 10;

### 1107 New Users Daily Count (Medium)
select * from traffic;
# Question: Reports for every date within at most 90 days from today (past), the number of users that logged in for the first time on that date. 
# --- Assume today is 2019-06-30.
# The user with id 5 first logged in on 2019-03-01 so he's not counted on 2019-06-21.
select activity_date as login_date, count(distinct user_id) as user_count from traffic 
where user_id in (select user_id from traffic group by user_id having datediff("2019-06-30",min(activity_date))<90)
and activity = "login" group by activity_date; 

### 1112 Highest Grade For Each Student (Medium)
select * from enrollments;
# Question: Fiind the highest grade with its corresponding course for each student. 
# In case of a tie, you should find the course with the smallest course_id. The output must be sorted by increasing student_id.
select student_id, min(course_id) as course_id,  grade from enrollments 
where (student_id, grade) in (select student_id, max(grade) as grade from enrollments group by student_id) 
group by student_id, grade;

# 1126 Active Businesses (Medium)
select * from events;
# Question: Find all active businesses.
# --- An active business is a business that has more than one event type with occurences greater than the average occurences of that event type among all businesses.
select a.business_id from events as a left join  
(select event_type, avg(occurences) as occurences from events group by event_type) as b on a.event_type=b.event_type 
where a.occurences > b.occurences 
group by business_id having count(a.event_type)>1;

### 1132 Reported Posts II (Medium)
select * from actions2;
select * from removals;
# Question: Find the average for daily percentage of posts that got removed after being reported as spam, rounded to 2 decimal places.
# -> The only days had spam reports are 2019-07-02 & 2019-07-04
# -> The percentage for 2019-07-04 is 50% because only one post of two spam reported posts was removed.
# -> The percentage for 2019-07-02 is 100% because one post was reported as spam and it was removed.
# -> The average is (50 + 100) / 2 = 75%
select round(avg(c.percent)*100,2) as average_daily_percent from (
select a.action_date, count(b.post_id)/count(*) as percent from actions2 as a left join removals as b on a.post_id=b.post_id where extra = "spam" group by a.action_date) c; 

### 1149 Article Views II (Medium)
select * from views;
# Question: Find all the people who viewed more than one article on the same date, sorted in ascending order by their id.
select view_date, viewer_id from views group by view_date, viewer_id having count(distinct article_id)>1;

### 1158 Market Analysis I (Medium)
select * from users2;
select * from orders2;
# Question: Find for each user, the join date and the number of orders they made as a buyer in 2019.
# Method One: 
select a.join_date, b.buyer_id,count(case when year(order_date) = "2019" then buyer_id else null end) as buyer_id from users2 as a left join orders2 as b on a.user_id = b.buyer_id 
group by a.join_date, b.buyer_id;

# Method Two:
select a.user_id as buyer_id, a.join_date, count(b.order_id) as orders_in_2019 from users2 as a left join orders2 as b on a.user_id=b.buyer_id and year(b.order_date)=2019 
group by a.user_id, a.join_date;

### 1164 Product Price at a Given Date (Medium)
select * from product3;
# Find the prices of all products on 2019-08-16. 
# --- Assume the price of all products before any change is 10.
# Method 1: 
select distinct product_id, price from (
select product_id, 
case when (product_id, change_date) in (select product_id, max(change_date) as max_date from product3 where change_date < "2019-08-16" group by product_id) then new_price
when product_id not in (select product_id from product3 where change_date < "2019-08-16") then  "10" else null end as price from product3) a where price is not null;

# Method 2:
select product_id, if(change_date>"2019-08-16","10",new_price) as price from product3 where 
(product_id, change_date) in (select product_id, max(change_date) as date from product3 where change_date<=("2019-08-16") group by product_id) or
(product_id, change_date) in (select product_id, min(change_date) as date from product3 group by product_id having date > ("2019-08-16"));

# Method 3:
select distinct a.product_id, ifnull(b.new_price,"10") as price from product3 as a left join
(select product_id, new_price from product3 where 
(product_id, change_date) in (select product_id, max(change_date) as date from product3 where change_date<=("2019-08-16") group by product_id)) as b 
on a.product_id = b.product_id;

### 1174 Immediate Food Delivery II (Medium)
select * from delivery;
# Question: Find the percentage of immediate orders in the first orders of all customers, rounded to 2 decimal places.
# If the preferred delivery date of the customer is the same as the order date then the order is called immediate otherwise it's called scheduled.
select round(sum(case when order_date = customer_pref_delivery_date then 1 else 0 end) / count(*) *100, 2) as immediate_percentage from delivery
where (customer_id,order_date) in (select customer_id,min(order_date) from delivery group by customer_id);

### 1193 Monthly Transactions I (Medium)
select * from transactions;
# Question: Find for each month and country, the number of transactions and their total amount, the number of approved transactions and their total amount.
select DATE_FORMAT(trans_date,"%Y-%m") as month, country, 
count(*) as count, sum(amount) as trans_total_amount, sum(if(state="approved", 1,0)) as approved_amount, sum(if(state="approved",amount,0)) as approved_total_amount 
from transactions group by country, month order by 1;

### 1204. Last Person to Fit in the Elevator (Medium)
select * from queue;
# Quesion: Find the person_name of the last person who will fit in the elevator without exceeding the weight limit. 
# The maximum weight the elevator can hold is 1000.
select person_name from (
select a.*, (select sum(b.weight) from queue as b where b.turn <= a.turn) as weight_sum from queue as a) c where weight_sum <=1000 order by turn desc limit 1;

### 1205 Monthly Transactions II (Medium)
select * from transactions2;
select * from chargebacks;
# Question: Find for each month and country, the number of approved transactions and their total amount, the number of chargebacks and their total amount.

5-1/1000/1/2000
6-3-12000-1-1000

# Method 1:
# Step one:
select a.*, b.*, date_format(a.trans_date,"%m/%Y") as date1, date_format(b.trans_date,"%m/%Y") as date2, case when a.state = "approved" then a.amount else null end as approved_amount,
case when b.trans_date is not null then a.amount else null end as trans_amount from transactions2 as a left join chargebacks as b on a.id=b.trans_id;

# Step two:
select date1, country, count(approved_amount), sum(approved_amount) from 
(select a.country, date_format(a.trans_date,"%m/%Y") as date1, date_format(b.trans_date,"%m/%Y") as date2, case when a.state = "approved" then a.amount else null end as approved_amount,
case when b.trans_date is not null then a.amount else null end as trans_amount from transactions2 as a left join chargebacks as b on a.id=b.trans_id) c group by date1,country;

select date2, country, count(trans_amount), sum(trans_amount) from 
(select a.country, date_format(a.trans_date,"%m/%Y") as date1, date_format(b.trans_date,"%m/%Y") as date2, case when a.state = "approved" then a.amount else null end as approved_amount,
case when b.trans_date is not null then a.amount else null end as trans_amount from transactions2 as a left join chargebacks as b on a.id=b.trans_id) c group by date2,country;

# Step three: outer join will be too much, so we add the extra date from chargebacks dirctly
select x.*, y.chargeback_count, y.chargeback_amount from 
(select date1, country, count(approved_amount) as approved_count, sum(approved_amount) as approved_amount from 
(select a.country, date_format(a.trans_date,"%m/%Y") as date1, date_format(b.trans_date,"%m/%Y") as date2, case when a.state = "approved" then a.amount else null end as approved_amount,
case when b.trans_date is not null then a.amount else null end as trans_amount from transactions2 as a left join chargebacks as b on a.id=b.trans_id) c group by date1,country) as x left join 
(select date2, country, count(trans_amount) as chargeback_count, sum(trans_amount) as chargeback_amount from 
(select a.country, date_format(a.trans_date,"%m/%Y") as date1, date_format(b.trans_date,"%m/%Y") as date2, case when a.state = "approved" then a.amount else null end as approved_amount,
case when b.trans_date is not null then a.amount else null end as trans_amount from transactions2 as a left join chargebacks as b on a.id=b.trans_id) c group by date2,country) as y on x.date1=y.date2 and x.country = y.country
union all
select a.month1, b.country, "0" as approved_count, "0" as approved_amount, count(a.trans_id) as chargeback_count, sum(b.amount) as chargeback_amount 
	from (select trans_id, date_format(trans_date, "%m/%Y") as month1 from chargebacks where date_format(trans_date, "%Y-%m") not in (select date_format(trans_date, "%Y-%m") from transactions2)) a
	left join transactions2 as b on a.trans_id=b.id group by a.month1, b.country;
    
# part one --- c --- approved_count & approved_amount
select c.*, d.chargeback_count, d.chargeback_amount from (
	select date_format(trans_date, "%Y-%m") as month, country, sum(if(state="approved",1,0)) as approved_count, sum(if(state="approved",amount,0)) as approved_amount
	from transactions2 group by month, country) as c
right join # we can see that the third row is missing --- remember to change the join back to "inner join"

# part two --- d (a join b) --- chargeback_count and chargeback_amount
	(select date_format(a.trans_date, "%Y-%m") as month2, b.country, count(a.trans_id) as chargeback_count, sum(b.amount) as chargeback_amount
	from chargebacks as a left join transactions2 as b on a.trans_id=b.id group by month2, b.country) as d 
on c.month=d.month2 and c.country=d.country
union all

# part three - replace the null part
select a.month1, b.country, "0" as approved_count, "0" as approved_amount, count(a.trans_id) as chargeback_count, sum(b.amount) as chargeback_amount 
	from (select trans_id, date_format(trans_date, "%Y-%m") as month1 from chargebacks where date_format(trans_date, "%Y-%m") not in (select date_format(trans_date, "%Y-%m") from transactions2)) a
	left join transactions2 as b on a.trans_id=b.id group by a.month1, b.country;

### 1212 Team Scores in Football Tournament (Medium)
select * from teams;
select * from matches2; 
# Question: Selects the team_id, team_name and num_points of each team in the tournament after all described matches. 
# Result table should be ordered by num_points (decreasing order). In case of a tie, order the records by team_id (increasing order).
# You would like to compute the scores of all teams after all matches. Points are awarded as follows:
# --- A team receives three points if they win a match (Score strictly more goals than the opponent team).
# --- A team receives one point if they draw a match (Same number of goals as the opponent team).
# --- A team receives no points if they lose a match (Score less goals than the opponent team).
select a.team_id, a.team_name, ifnull(sum(b.point),0) as num_points from teams as a left join 
(select host_team as team,  case when host_goals > guest_goals then 3 when host_goals = guest_goals then 1 else 0 end as point from matches2
union all
select guest_team as team, case when host_goals < guest_goals then 3 when host_goals = guest_goals then 1 else 0 end as point from matches2) as b
on a.team_id = b.team
group by a.team_id, a.team_name order by 3 desc, 2;

### 1264 Page Recommendations (Medium)
select * from friendship;
select * from likes;
# Question: Write an SQL query to recommend pages to the user with user1_id = 1 using the pages that your friends liked. 
# --- It should not recommend pages you already liked.
select distinct b.page_id as recommended_page from friendship as a left join likes as b on a.user2_id=b.user_id
where b.page_id not in (select page_id from likes where user_id=1)
and a.user1_id=1;

### 1270 All People Report to the Given Manager (Medium)
select * from employee5;
# Question: Find employee_id of all employees that directly or indirectly report their work to the head of the company.
# --- The head of the company is the employee with employee_id 1.
# --- The indirect relation between managers will not exceed 3 managers as the company is small.
select a.employee_id from employee5 as a left join employee5 as b on a.manager_id=b.employee_id left join employee5 as c on b.manager_id=c.employee_id
where c.manager_id=1 and a.employee_id != 1;

### 1285 Find the Start and End Number of Continuous Ranges (Medium)
select * from logs2;
# Question: Find the start and end number of continuous ranges in table Logs.
# Method 1:
select a.log_id as start_id, min(b.log_id) as end_id
from (select log_id from logs2 where (log_id-1) not in (select * from logs2)) as a,
(select log_id from logs2 where (log_id+1) not in (select * from logs2)) as b where b.log_id >= a.log_id
group by a.log_id;

# Method 2:
# Step one:
select distinct start_id, end_id, end_id-start_id as diff from (
select a.log_id as start_id from logs2 as a where (select count(*) from logs2 as b where b.log_id=a.log_id-1) = 0) a, 
(select a.log_id as end_id from logs2 as a where (select count(*) from logs2 as b where b.log_id=a.log_id+1) = 0) b;
# Step two:
select start_id, end_id from (
select distinct start_id, end_id, end_id-start_id as diff from (
select a.log_id as start_id from logs2 as a where (select count(*) from logs2 as b where b.log_id=a.log_id-1) = 0) a, 
(select a.log_id as end_id from logs2 as a where (select count(*) from logs2 as b where b.log_id=a.log_id+1) = 0) b) c
where (c.start_id, c.diff) in (
select start_id, min(end_id-start_id) as diff from (
select a.log_id as start_id from logs2 as a where (select count(*) from logs2 as b where b.log_id=a.log_id-1) = 0) a, 
(select a.log_id as end_id from logs2 as a where (select count(*) from logs2 as b where b.log_id=a.log_id+1) = 0) b 
where end_id-start_id>=0 group by start_id);

# Method 2
select start_id, end_id, diff, 
case when @pre = start_id then 0 else 1 end as rnk,
@pre := start_id
from (
select distinct start_id, end_id, end_id-start_id as diff from (
(select a.log_id as start_id from logs2 as a where (select count(*) from logs2 as b where b.log_id=a.log_id-1) = 0) a, 
(select a.log_id as end_id from logs2 as a where (select count(*) from logs2 as b where b.log_id=a.log_id+1) = 0) b) where end_id-start_id>=0 order by 1) c,
(select @pre := null) d
where case when @pre = start_id then 0 else 1 end=1;

### 1308 Running Total for Different Genders (Medium)
select * from scores;
# Question: Find the total score for each gender at each day
select gender, day, (select sum(b.score_points) from scores as b where a.day>=b.day and a.gender=b.gender) as total from scores as a order by 1,2;

### 1321 Restaurant Growth (Medium)
select * from customer3;
# Question: Compute moving average of how much customer paid in a 7 days window (current day + 6 days before) .
# Method 1: interval day
select distinct a.visited_on, (select sum(b.amount)/7 from customer3 as b where b.visited_on between a.visited_on - interval 6 day and a.visited_on) from customer3 as a
where a.visited_on >= (select min(visited_on) + interval 6 day from customer3);

# Method 2: datediff()
select distinct visited_on, 
(select round(sum(amount), 2) from customer3 as b where datediff(a.visited_on, b.visited_on) between 0 and 6) as amount,
(select count(amount) from customer3 as b where datediff(a.visited_on, b.visited_on) between 0 and 6) as count, 
(select round(sum(amount)/7, 2) from customer3 as b where datediff(a.visited_on, b.visited_on) between 0 and 6) as average_amount
from customer3 as a 
where visited_on >= date_add((select min(visited_on) from customer3), interval 6 day);
# Note: see the column: count --> we can't use count directly because there is a duplicate amount on 2019-01-10

### 1341 Movie Rating (Medium)
select * from movies;
select * from users3;
select * from movie_rating;
# Question 1: Find the name of the user who has rated the greatest number of the movies.
# --- In case of a tie, return lexicographically smaller user name.
# Question 2: Find the movie name with the highest average rating in February 2020.
# --- In case of a tie, return lexicographically smaller movie name..
# Method 1:
select b.name from movie_rating as a left join users3 as b on a.user_id = b.user_id where a.rating in (select max(rating) from movie_rating) order by 1 limit 1;

select a.average, b.title from (
select movie_id, avg(rating) as average from movie_rating where month(created_at) = 2 group by movie_id) as a left join movies as b on a.movie_id = b.movie_id
where a.average in (select * from (select avg(rating) from movie_rating where month(created_at) = 2 group by movie_id order by avg(rating) desc limit 1) c) order by title limit 1;

# Method 2:
select b.name as results from (
select user_id, max(rating) from movie_rating group by user_id order by 2 desc,1 limit 1) as a
left join users3 as b on a.user_id=b.user_id
union
select b.title as resultes from (
select movie_id, avg(rating) from movie_rating where year(created_at) = 2020 and month(created_at)=2 group by movie_id order by 2 desc,1 limit 1) as a
left join movies as b on a.movie_id=b.movie_id;

### 1350 Students With Invalid Departments (Easy)
select * from department2;
select * from students2;
# Question: Find the id and the name of all students who are enrolled in departments that no longer exists.
select a.id, a.name from students2 as a left join department2 as b on a.department_id=b.dept_id where b.dept_id is null;

### 1355 Activity Participants (Medium)
select * from friends;
# Question: Find the names of all the activities with neither maximum, nor minimum number of participants.
# Method 1:
select * from (select activity, count(name) as cc from friends group by activity) a where cc not in (select max(cc) from (select activity, count(*) as cc from friends group by activity) a)
and cc not in (select min(cc) from (select activity, count(*) as cc from friends group by activity) a);
 
# Method 2:
select activity as results from friends group by activity
having count(*) > (select count(*) from friends group by activity order by 1 limit 1)
and count(*) < (select count(*) from friends group by activity order by 1 desc limit 1);

### 1364 Number of Trusted Contacts of a Customer (Medium)
select * from customer4;
select * from contacts;
select * from invoices;
# Question: Find the following for each invoice_id
# --- customer_name: The name of the customer the invoice is related to.
# --- price: The price of the invoice.
# --- contacts_cnt: The number of contacts related to the customer.
# --- trusted_contacts_cnt: The number of contacts related to the customer and at the same time they are customers to the shop. (i.e His/Her email exists in the Customers table.)
# Method 1:
 select e.customer_name, e.price, e.contacts_cnt, ifnull(f.cc,0) as trusted_contacts_cnt from (
select c.*, ifnull(d.cc,0) as contacts_cnt from (
select b.customer_name, a.price, a.user_id from invoices as a left join customer4 as b on a.user_id = b.customer_id) as c left join (
select user_id, count(*) as cc from contacts group by user_id) as d on c.user_id = d.user_id) as e left join (
select user_id, count(*) as cc from contacts where contact_email in (select email from customer4) group by user_id) as f on e.user_id = f.user_id;

# Method 2:
# step 1:
select a.customer_id, a.customer_name, b.contact_name,
case when contact_name in  (select customer_name from customer4) then 1 else 0 end
from customer4 as a left join contacts as b 
on a.customer_id=b.user_id;

# step 2:
select c.invoice_id, d.customer_name, c.price, d.count as contacts_cnt, d.sum as trusted_contacts_cnt from invoices as c left join (
select a.customer_id, a.customer_name, count(b.contact_name) as count,
sum(case when contact_name in  (select customer_name from customer4) then 1 else 0 end) as sum
from customer4 as a left join contacts as b on a.customer_id=b.user_id group by customer_id, customer_name) as d on c.user_id=d.customer_id;
# Note -> count(contact_name) -> make john's contacts_cnt = 0
# --- Alice has three contacts, two of them are trusted contacts (Bob and John).
# --- Bob has two contacts, none of them is a trusted contact.
# --- Alex has one contact and it is a trusted contact (Alice).
# --- John doesn't have any contacts.

### 1393 Capital Gain/Loss (Medium)
select * from stocks;
# Question: Report the Capital gain/loss for each stock
# --- The capital gain/loss of a stock is total gain or loss after buying and selling the stock one or many times.
select stock_name, sum(case when operation = "Buy" then -price else price end) as gain_loss
from stocks group by stock_name;

### 1398 Customers Who Bought Products A and B but Not C (Medium)
select * from customers5;
select * from orders4;
# Question: Report the customer_id and customer_name of customers who bought products "A", "B" but did not buy the product "C" 
# Method 1:
select a.*, b.customer_name from (
select b.customer_id from orders4 as a, orders4 as b where a.customer_id = b.customer_id and a.product_name = "A" and b.product_name = "B" and a.customer_id not in (select customer_id from orders4 where product_name = "C")) as a 
left join customers5 as b on a.customer_id = b.customer_id;

# Method 2: - delete
# --- Since we want to recommend them buy this product.
select e.customer_id, e.customer_name from customers5 as e left join (
select c.customer_id from 
(select a.customer_id, 
sum(case when a.product_name="A" and b.product_name="B" then 1 else 0 end) as AB
from orders4 as a, orders4 as b, orders4 as c where a.customer_id=b.customer_id group by a.customer_id having AB>0) as c inner join 
(select a.customer_id, 
sum(case when a.product_name="C" then 1 else 0 end) as C
from orders4 as a, orders4 as b, orders4 as c where a.customer_id=b.customer_id group by a.customer_id having C=0) as d 
on c.customer_id = d.customer_id) as f
on e.customer_id=f.customer_id where f.customer_id is not null;

### 1421 NPV Queries (Medium)
select * from npv;
select * from queries2;
# Question: Find the npv of all each query of queries table.
select a.*, ifnull(b.npv, 0) as npv from queries2 as a left join npv as b on a.id=b.id and a.year=b.year order by 1, 2;
