### 175 Combine Two Tables (Easy)
select * from employee;
select * from department;
# Q --> Provides the following information for each employee, regardless if there is a location for each of those employee:
# --- "Name, Job, Location"
select a.Name, a.Job, b.Location from employee as a left join department as b on a.Dept_Id = b.Dept_Id;
 
### 176  Second Highest Salary (Easy)
select * from employee;
# Q --> Get the second highest salary from the Employee table.
# --- If there is no second highest salary, then the query should return null.
# Method 1:
select distinct Salary from employee order by Salary desc limit 1 offset 1;
# Method 2: 
 select ifnull(Salary,null) as SecondHighestSalary from employee where Salary < (select Salary from employee order by Salary desc limit 1) order by SecondHighestSalary desc limit 1;
 # Method 3: max
select max(Salary) as SecondHighestSalary from employee where Salary < (select max(Salary) from employee); # Note: Max function can automatically return null
 # Method 4: join
 select max(a.Salary) as SecondHighestSalary from employee as a, employee as b where a.Salary<b.Salary;

### 181 Employees Earning More Than Their Managers (Easy)
select * from employee; 
# Q --> Finds out employees who earn more than their managers
select a.Name as EMPLOYEE, a.Salary, b.Name as MANAGER, b.Salary from employee as a left join employee as b on a.Mgr_Id=b.Emp_Id where a.Salary>b.Salary;

### 182 Duplicate Salaries (Easy)
select * from employee; 
# Q --> Find all duplicate salaries 
select Salary from employee group by (Salary) having count(Salary)>1; 

### 183 Department Without Employee Information (Easy)
select * from employee; 
select * from department;
# Q --> Find all departments which don't have any employee information
# Method 1:
select * from department where Dept_id not in (select distinct Dept_id from employee); 
# Method 2:
select a.Dept_Id from department as a left join employee as b on a.Dept_Id=b.Dept_Id where b.Dept_Id is NULL;

### 196 Delete Duplicate Emails (Easy)
select * from person;
# Q --> Delete all duplicate emails, keeping only unique emails based on its smallest Id.
SET SQL_SAFE_UPDATES = 1; # choose safe update mode
delete from person where Id not in (select min(Id) as sal from person group by Email); # Incorrect way
# You can't specify target table 'employee' with the FROM clause
# Solve --> Add another "select"
delete from person where Id not in (select sal from (select Email, min(Id) as sal from person group by Email) as a); # Correct way
 
### 197 Rising Temperature (Easy)
select * from weather;
# Q --> Find all hiredates with higher temperature compared to its previous (yestearday's) dates.
select a.* from weather as a, weather as b where datediff(a.RecordDate,b.RecordDate)=1 and a.Temperature>b.Temperature; 
# datediff(date1, date2) --> "left - right" OR "where TIMESTAMPDIFF(Day, date2, date1)=1"  ---> "right - left"

# Note: We can't directly use a.hiredate = b.hiredate+1 because 31+1 will be 32 instead of first day of the month
select date("2020-01-31"), date("2020-01-31")+1 from weather;

### 511 Game Play Analysis I (Easy)
select * from game;
# Q --> Reports the first login date for each player.
select player_id, min(event_date) from game group by player_id;

### 512 Game Play Analysis II (Easy)
select * from game;
# Q --> Reports the device that is first logged in for each player.
# First method: join
select a.player_id, b.device_id from 
(select player_id, min(event_date) as event_date from game group by player_id) as a 
left join game as b on a.player_id=b.player_id and a.event_date=b.event_date;
# Second method: where
select a.player_id, a.device_id from game as a where (a.player_id, a.event_date) in 
(select player_id, min(event_date) from game group by player_id);

### 577 Employee Bonus (Easy)
select * from employee;
select * from bonus;
# Question: Select all employee''s name and bonus whose bonus is < 1000
select a.name, a.job, b.job, b.bonus from employee as a left join bonus as b on a.job=b.job where b.bonus < 1000 or b.bonus is null;
# Note: remember to include the null (no bonus) and choose a.job instead of b.job

### 584 Find Customer Referee (Easy)
select * from customer;
# Question: Return the list of customers NOT referred by the person with id '2'. 
# --- Include those has no referee.
select name from customer where referee_id != 2 or referee_id is null;

### 586 Customer Placing the Largest Number of Orders (Easy)
select * from customer2;
# --- Product_key is not related
# Q1 ---> Find the customer who has placed the largest number of orders.
# --- It is guaranteed that exactly one customer will have placed more orders than any other customer.
select customer_id from customer2 group by customer_id order by count(*) desc limit 1;

# Question: What if more than one customer have the largest number of orders, can you find all the customer2 in this case?
select customer_id from customer2 group by customer_id 
having count(*) = (select count(*) as count from customer2 group by customer_id order by count desc limit 1);

### 595 Big Countries (Easy)
select * from world;
# Question: Output big countries' name, population and area.
# --- A country is big if it has an area of bigger than 3 million square km or a population of more than 25 million.
select name, population, area from world where area>3000000 or population >25000000;

### 596 Classes More Than 5 Students (Easy)
select * from courses;
# Question: List out all classes which have more than or equal to 5 students.
 select class from courses group by class having count(distinct student)>5;
# Note: Add distinct to remove the possible duplicate student

### 597 Friend Requests I: Overall Acceptance Rate (Easy)
select * from friend_request;
select * from request_accepted; 
# Question: Find the overall acceptance rate of requests rounded to 2 decimals
# Rule 1 -> Acceptance rate of requests = # of acceptance / # of requests 
# Rule 2 -> The accepted requests are not necessarily from the table friend_request -> simply count the total accepted requests
# Rule 3 -> The ‘duplicated’ requests or acceptances are only counted once. -> DISTINCT
# Rule 4 -> If there is no requests at all, you should return 0.00 as the accept_rate. -> IFNULL()
# Formula ->>> # acceptance rate = # of distinct (requester_id, accepter_id) /  # of distinct (sender_id, send_to_id)

# Method One:
# Step one: 
select a.*, b.* from friend_request as a left join request_accepted as b on a.sender_id = b.requester_id and a.send_to_id = b.accepter_id;
# Step two:
select round(ifnull(count(distinct b.requester_id, b.accepter_id) / count(distinct a.sender_id, a.send_to_id),0),2) as acceptance_rate 
from friend_request as a left join request_accepted as b on a.sender_id = b.requester_id and a.send_to_id = b.accepter_id; 

# Method Two:
select (round(
	ifnull( # rule 4
		(select count(*) from (select distinct requester_id, accepter_id from request_accepted) as a)/ 
		(select count(*) from (select distinct sender_id, send_to_id from friend_request) as b) # rule 3
		,0) ,2)) as acceptance_rate;

# 603 Consecutive Available Seats (Easy)
select * from seat;
# Question: Query all the consecutive available seats order by the seat_id
# --- The seat_id is an auto increment int, and free is bool ('1' means free, and '0' means occupied.).
# --- Consecutive available seats are more than 2 (inclusive) seats consecutively available
# Method 1:
select seat_id from seat where 
seat_id in
(select a.seat_id from seat as a, seat as b where b.seat_id = a.seat_id+1 and a.free=b.free=1)
or seat_id in
(select a.seat_id from seat as a, seat as b where b.seat_id = a.seat_id-1 and a.free=b.free=1);
# Remember to consider the last seat_id -> 5

# Method 2:
select distinct a.seat_id from seat as a, seat as b where (b.seat_id = a.seat_id+1 or  b.seat_id = a.seat_id-1) and a.free=b.free=1;

# Method 3:
select distinct a.seat_id from seat as a, seat as b where abs(b.seat_id - a.seat_id)=1 and a.free = b.free = 1;

### 607 Sales Person (Easy)
select * from salesperson;
select * from orders;
select * from company;
# Question: Output all the names in the table salesperson, who didn’t have sales to company 'RED'.
# Method one -> WRONG -> In table "orders", the sales_id 4 have both com_id 1 ("RED") and 3, which shouldn't be included
select a.name,a.sales_id,b.com_id,c.name from salesperson as a left join orders as b on a.sales_id=b.sales_id left join company as c on b.com_id=c.com_id;
# Solved:
select a.name, sum(if(c.name="RED",1,0)) as red from salesperson as a left join orders as b on a.sales_id=b.sales_id left join company as c on b.com_id=c.com_id
group by a.name having red=0;

# Second method: -> CORRECT
select c.name from salesperson as c where sales_id not in (select a.sales_id from orders as a left join company as b on a.com_id = b.com_id where b.name="RED");
# Remember add "as c" to refer salesperson

### 610 Triangle Judgement (Easy)
select * from triangle;
# Question: Writing a query to judge whether these three sides can form a triangle
select *, case when x+y>z and x+z>y and z+y>x then "Yes" else "No" end as Triangle from triangle; 

### 613 Shortest Distance in a Line (Easy)
select * from point;
# Question: Find the shortest distance between two points in these points.
select min(a.x-b.x) from point as a inner join point as b on a.x > b.x;

### 619 Biggest Single Number (Easy)
select * from numbers3;
# Question: Find the biggest number, which only appears once.
select num from numbers3 group by num having count(*)=1 order by num desc limit 1;

### 620 Not Boring Movies (Easy)
select * from cinema;
# Question: Output movies with an odd numbered ID and a description that is not 'boring'. Order the result by rating.
select * from cinema where id % 2 = 1 and description != "boring" order by rating desc;
# or mod(id,2)=1

###  627 Swap Salary (Easy)
select * from salary;
# Question: Swap all f and m values (i.e., change all f values to m and vice versa) with a single update statement 
# --- DO NOT write any select statement for this problem.
SET SQL_SAFE_UPDATES = 0; 

UPDATE salary SET gender = (case when gender="m" then "f" else "m" end);

### 1050 Actors and Directors Who Cooperated At Least Three Times (Easy)
select * from actordirector;
# Question: Provides the pairs (actor_id, director_id) where the actor have cooperated with the director at least 3 times.
select actor_id, director_id from actordirector group by actor_id, director_id having count(*)>=3;

### 1068 Product Sales Analysis I (Easy)
select * from sales;
select * from product22;
# Question: Reports all product names of the products in the Sales table along with their selling year and price.
select b.product_name, a.year,a.price from sales as a left join product22 as b on a.product_id = b.product_id;

### 1069 Product Sales Analysis II (Easy)
select * from sales;
# Q --> Reports the total quantity sold for every product id.
select product_id, sum(quantity) as total_quantity from sales group by product_id;

### 1075 Project Employees I (Easy)
select * from project4;
select * from employee4;
# Question: Reports the average experience years of all the employees for each project, rounded to 2 digits.
select a.project_id, round(avg(b.experience_years),2) as average_years from project4 as a 
left join employee4 as b on a.employee_id=b.employee_id group by a.project_id;

### 1076 Project Employees II (Easy)
select * from project4;
select * from employee4;
# Question: Reports all the projects that have the most employees.
select project_id from project4 group by project_id having count(employee_id) = 
	(select count(employee_id) from project4 group by project_id order by count(employee_id) desc limit 1);
# Remember to consider the case when there are more than one project have the most employees

### 1082 Sales Analysis I (Easy)
select * from sales2;
# Question: Reports the best seller by total sales price, If there is a tie, report them all.
select seller_id, sum(price) as total_sales from sales2 group by seller_id
having sum(price) = (select sum(price) from sales2 group by product_id order by sum(price) desc limit 1);

### 1083 Sales Analysis II (Easy)
select * from product2;
select * from sales2;
# Question: Reports the buyers who have bought S8 but not iPhone. 
select a.*, b.* from sales2 as a left join product2 as b on a.product_id=b.product_id;

select a.buyer_id from sales2 as a left join product2 as b on a.product_id=b.product_id where b.product_name = "S8" and b.product_name != "iPhone";

### 1084 Sales Analysis III (Easy)
select * from product2;
select * from sales2;
# Question: Reports the products that were ONLY sold in spring 2019. (between 2019-01-01 and 2019-03-31 inclusive.)
# Method 1:
select a.product_id,  b.product_name from sales2 as a left join product2 as b on a.product_id=b.product_id group by a.product_id, b.product_name having min(a.sale_date)>"2019-01-01" and max(a.sale_date)<"2019-03-31";
# Remember the product_id 2 has two sale_date, one is in the range but another one not, so we can't use the between directly
select * from sales2 where product_id=200;
#Method 2:
select distinct a.product_id, b.product_name from sales2 as a left join product2 as b on a.product_id = b.product_id
where a.sale_date between '2019-01-01' and '2019-03-31' # Step one: Find the all the products that brought in this season
and b.product_id not in # Step two: From this products, find which one doens't sell out of this season
(select b.product_id from sales2 as a left join product2 as b on a.product_id = b.product_id where a.sale_date not between '2019-01-01' and '2019-03-31'); 

### 1113 Reported Posts (Easy)
select * from actions;
# Questoin: Reports the number of posts reported yesterday for each report reason (column: 'extra'). Assume today is 2019-07-05.
select extra as report_reason, count(distinct post_id) as report_count from actions 
where extra is not null and datediff(date("2019-07-05"), action_date)=1 
group by extra;

### 1141 User Activity for the Past 30 Days I (Easy)
select * from activity2;
# Question: Find the daily active user count for a period of 30 days ending 2019-07-27 inclusively. 
select activity_date as day, count(distinct user_id) as active_users from activity2 where datediff(date("2019-07-27"),activity_date) <=30 group by activity_date;

### 1142 User Activity for the Past 30 Days II (Easy)
select * from activity2;
# Question: Find the average number of sessions per user for a period of 30 days ending 2019-07-27 inclusively, rounded to 2 decimal places. 
select round(avg(active_session),2) as average_sessions_per_user from (
select user_id, count(distinct session_id) as active_session from activity2 where datediff(date("2019-07-27"),activity_date) <=30 group by user_id) a;

### 1148 Article Views I (Easy)
select * from views;
# Question: Find all the authors that viewed at least one of their own articles, sorted in ascending order by their id.
select distinct author_id from views where author_id =  viewer_id order by author_id;

### 1173 Immediate Food Delivery I (Easy)
select * from delivery;
# Question: Fiind the percentage of immediate orders in the table, rounded to 2 decimal places.
# If the preferred delivery date of the customer is the same as the order date then the order is called immediate otherwise it's called scheduled.
# Method 1:
select round(sum(case when order_date = customer_pref_delivery_date then 1 else 0 end) / count(*) *100, 2) as immediate_order from delivery;
# Method 2:
select round((select count(*) from delivery where order_date = customer_pref_delivery_date) / count(*)*100,2) as immediate_percentage from delivery;

### 1179. Reformat Department Table (Easy)
select * from department3;
# Question: Reformat the table such that there is a department id column and a revenue column for the first quarter (Jan-March).
# rows -> id; columns -> month; values -> revenue
select id, 
	sum(case when month = 'Jan' then revenue else null end) as Jan_Revenue,
	sum(case when month = 'Feb' then revenue else null end) as Feb_Revenue,
	sum(case when month = 'Mar' then revenue else null end) as Mar_Revenue
from department3
group by id;

### 1211 Queries Quality and Percentage (Easy)
select * from queries;
# Question: Find for each query_name, the quality and poor query percentage
# --- quality = average (rating / position)
# --- poor_query_percentage = # of poor rating (less then 3) / total # of rating
select query_name, round(avg(rating/position),2) as quality, round((sum(case when rating < 3 then 1 else 0 end) / count(query_name) * 100),2) as poor_query_percentage
from queries group by query_name;

### 1241 Number of Comments per Post (Easy)
select * from submissions;
# Question: Find the number of comments for each post
# --- if partent_id is null -> this is a post
# --- The other sub_id is the comment for the post (parent_id)
# --- The repetitive comments will only count once
select a.sub_id as post_id, count(distinct b.sub_id) as number_of_comments from submissions as a left join submissions as b on a.sub_id = b.parent_id where a.parent_id is null group by a.sub_id;

### 1251 Average Selling Price (Easy)
select * from prices;
select * from unitsold;
# Question: Find the average selling price for each product.
# Selling price = price * units
select a.product_id, round(sum(a.price*b.units)/sum(b.units),2) as average_price from prices as a left join unitsold as b on a.product_id=b.product_id
where b.purchase_date between a.start_date and a.end_date group by a.product_id;

### 1280 Students and Examinations (Easy)
select * from student;
select * from subjects;
select * from examinations;
# Question:  Find the number of times each student attended each exam.
# Method 1: can delete
select c.student_id, c.subject_name, sum(case when c.subject_name = d.subject_name then "1" else "0" end) from 
(select a.student_id, b.subject_name from student as a, subjects as b) as c left join examinations as d on c.student_id = d.student_id
group by c.student_id, c.subject_name;

# Method 2: better
select student_id, subject_name, count(*) as count from examinations group by student_id, subject_name;
select c.student_id, c.student_name, c.subject_name, ifnull(d.count,0) as attended_exams from 
(select a.*, b.* from student as a, subjects as b) c left join
(select student_id, subject_name, count(*) as count from examinations group by student_id, subject_name) d on c.student_id=d.student_id and c.subject_name=d.subject_name;

###  1294 Weather Type in Each Country (Easy)
select * from countries;
select * from weather2;
# Question: Find the type of weather in each country for November 2019.
# --- The type of weather is Cold if the average weather_state is less than or equal 15, Hot if the average weather_state is greater than or equal 25 and Warm otherwise.
select a.country_name, 
case 
when avg(b.weather_state) <= 15 then "cold"
when avg(b.weather_state) >= 25 then "hot"
else "warm" end as weather_type 
from countries as a left join weather2 as b on a.country_id=b.country_id where year(b.day) = 2019 and month(b.day) = 11
group by a.country_name;

### 1303 Find the Team Size (Easy) 
select * from employee6;
# Question: find the team size of each of the employees
select a.employee_id, b.team_size from employee6 as a left join ( 
select team_id, count(*) as team_size from employee6 group by team_id) as b on a.team_id = b.team_id;

### 1322 Ads Performance (Easy)
select * from ads;
# Question: Find the Click-Through Rate (CTR) of each Ad
# --- CTR = Ad total clicks / (Ad total clicks + Ad total views)
# --- If Ad total clicks + Ad total views = 0 -> CTR = 0
select ad_id, 
round(ifnull(
sum(case when action = "Clicked" then 1 else 0 end) / 
sum(case when action = "Ignored" then 0 else 1 end), 0), 2) as ctr
from ads group by ad_id;

### 1327 List the Products Ordered in a Period (Easy)
select * from products4;
select * from orders3;
# Question: Get the names of products with greater than or equal to 100 units ordered in February 2020 and their amount.
select a.product_name, sum(unit) from products4 as a left join orders3 as b on a.product_id = b.product_id where year(b.order_date) = 2020 and month(b.order_date) = 2 
group by a.product_name having sum(unit)>=100;

### 1350 Students With Invalid Departments (Easy)
select * from department2;
select * from students2;
# Question: Find the id and the name of all students who are enrolled in departments that no longer exists.
select a.id, a.name from students2 as a left join department2 as b on a.department_id=b.dept_id where b.dept_id is null;

### 1378 Replace Employee ID With The Unique Identifier (Easy)
select * from employee7;
select * from employeeuni;
# Question: Show the unique ID of each user, If a user doesn't have a unique ID replace just show null.
select b.unique_id, a.name from employee7 as a left join employeeuni as b on a.id=b.id;

### 1407 Top Travellers (Easy)
select * from users4;
select * from rides;
# Question: Report the distance travelled by each user.
# --- Return the result table ordered by travelled_distance in descending order, if two or more users travelled the same distance, order them by their name in ascending order.
select a.name, ifnull(sum(b.distance),0) as travelled_distance from users4 as a left join rides as b 
on a.id=b.user_id group by a.name order by travelled_distance desc, name;

### 1435 Create a Session Bar Chart (Easy)
select * from sessions;
# Question: Report the (bin, total) in any order
# --- Duration is the time in seconds that a user has visited the application.
# --- You want to know how long a user visits your application. You decided to create bins of "[0-5>", "[5-10>", "[10-15>" and "15 minutes or more" and count the number of sessions on it.
select distinct c.bin, ifnull(d.total,0) as total from (
select case 
	when session_id=1 then "[0-5>"
	when session_id=2 then "[5-10>"
	when session_id=3 then "[10-15>" 
    else "15 or more" end as bin from sessions) as c
left join (
select case 
	when duration/60 < 5 then "[0-5>"
	when duration/60 < 10 then "[5-10>"
	when duration/60 < 15 then "[10-15>" 
    else "15 or more" end as bin, count(duration/60) as total from sessions group by bin) as d
on c.bin=d.bin;
