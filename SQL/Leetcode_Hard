### 185 Department Top Three Salaries (Hard)
select * from employee;
# Q --> Find employees who earn the top three salaries in each of the department. 
select * from (
select a.Name, a.Salary, a.Dept_id, (select count(distinct b.Salary) from employee as b where b.Salary >= a.Salary and a.Dept_id = b.Dept_id) as rank from employee as a) c
where c.rank <= 3 order by 3, 4;

### 262 Trips and Users (Hard)
select * from trips;
select * from users;
# Q --> Find the cancellation rate of requests made by unbanned users on 2013/10/1, 2013/10/2 and 2013/10/3
# Method 1:
# Step One: Remove all the requests when Banned = "Yes"
select Client_Id, Driver_Id, Status, Request_at from trips 
where Client_Id not in (select Users_Id from Users where Banned = "Yes") and Driver_Id not in (select Users_Id from Users where Banned = "Yes");

# Step Two: Cancellation Rate = # of canceled requests / # of total requests
select Request_at as Day, round(sum(case when Status != "completed" then "1" else "0" end) /count(*),2) as "Cancellation Rate" from trips 
where Client_Id not in (select Users_Id from Users where Banned = "Yes") and Driver_Id not in (select Users_Id from Users where Banned = "Yes") 
group by Request_at;

# Method 2:
# Step One:
select a.Client_Id, a.Driver_Id, if(a.Status = "completed",0,1) as cancel, a.Request_at, b.Banned, b.Role, c.Banned, c.Role from trips as a 
left join users as b on a.Client_Id = b.Users_Id left join users as c on a.Driver_Id = c.Users_Id where b.Banned  = "No" and c.Banned  = "No" ;

# Step Two:
select Request_at, round(sum(if(a.Status = "completed",0,1)) /  count(*),2) as "Cancellation Rate" from trips as a 
left join users as b on a.Client_Id = b.Users_Id left join users as c on a.Driver_Id = c.Users_Id where b.Banned  = "No" and c.Banned  = "No" 
group by Request_at;

# 569 Median Employee Salary (Hard)
select * from salary_median;
# Q --> Find the median salary of each company
# Method 1:
# Step 1:
select a.Company, a.Salary, b.Salary, sign(b.Salary-a.Salary) as sign from salary_median as a inner join salary_median as b 
where a.Company=b.Company order by 1,2;
# Step 2:
select a.Company, a.Salary, sum(sign(b.Salary-a.Salary)) as sign from salary_median as a inner join salary_median as b 
where a.Company=b.Company group by a.Company, a.Salary order by 1;
# Step 3:
select a.Company, a.Salary, sum(sign(b.Salary-a.Salary)) as sign from salary_median as a inner join salary_median as b 
where a.Company=b.Company group by a.Company, a.Salary having abs(sign) <= 1 order by 1;
# Step 4:
select c.Company, avg(c.Salary) as Average from (
select a.Company, a.Salary, sum(sign(b.Salary-a.Salary)) as sign from salary_median as a inner join salary_median as b 
where a.Company=b.Company group by a.Company, a.Salary having abs(sign) <= 1) c group by c.Company;
# WRONG: This method doesn't work for B: 10-20-30-30 or D: 10-20-20-40-50 (when there is a duplicate number near the median) -> B should be 25 and D should be 20

# Method 2: Works for all the possible situations --> disadvantage: can't use group by 
SET @rowindex := -1;

# Step one:
select @rowindex:=@rowindex + 1 as rowindex, Salary from salary_median where Company="B" order by Salary;

# Step two:
select avg(b.Salary) from
(select @rowindex:=@rowindex + 1 as rowindex, Salary from salary_median where Company="D" order by Salary) AS b
where b.rowindex in (FLOOR(@rowindex / 2) , CEIL(@rowindex / 2));

# 571 Find Median Given Frequency of Numbers (Hard)
select * from numbers;
# Method 1:
# Step one:
select a.Number, sum(b.Frequency) as Fre from numbers as a inner join numbers as b on a.Number>=b.Number group by a.Number;
# Step two: The median will always stay in the average of the following two order numbers
select floor((sum(Frequency)+1)/2) as floor, ceil((sum(Frequency)+1)/2) as ceil from numbers;
# Step three: Find out which values belong to these two numbers
select avg(Number) as median from (
(select a.Number, sum(b.Frequency) as Fre from numbers as a inner join numbers as b on a.Number>=b.Number group by a.Number
having Fre >= (select floor((sum(Frequency)+1)/2) from numbers) order by 1 limit 1)
union all
(select a.Number, sum(b.Frequency) as Fre from numbers as a inner join numbers as b on a.Number>=b.Number group by a.Number
having Fre >= (select ceil((sum(Frequency)+1)/2) from numbers) order by 1  limit 1)) x;

# Method 2:
# Step 1:
# --- fre1 -> how many numbers are smaller
# --- fre2 -> how many numbers are bigger
select n.Number, n.Frequency, (select sum(n2.Frequency) from Numbers n2 where n.Number > n2.Number) as fre1,
(select sum(n3.Frequency) from Numbers n3 where n.Number < n3.Number) as fre2 from numbers n;
# Step 2: 
# --- abs -> find the distance between the number and median
select a.Number, a.Frequency, a.fre1-a.fre2, abs(a.fre1-a.fre2) as abs from (
select n.Number, n.Frequency, (select sum(n2.Frequency) from Numbers n2 where n.Number > n2.Number) as fre1,
(select sum(n3.Frequency) from Numbers n3 where n.Number < n3.Number) as fre2 from numbers n) a;
# Step 3: 
# --- Filter: Frequency >= abs -> to see whether the distance is within the number's frequency
# --- Get the average at the end
select avg(n.Number) as median from numbers n where n.Frequency >= 
abs((select sum(n2.Frequency) from Numbers n2 where n.Number > n2.Number) - (select sum(n3.Frequency) from Numbers n3 where n.Number < n3.Number));

### 579 Find Cumulative Salary of an Employee (Hard)
select * from employee2;
# Question: Get the cumulative sum of an employee's salary over a period of 3 months but exclude the most recent month.
 select * from (
  select a.Id, a.Month, (select sum(b.Salary) from 
	(select * from employee2 where (Id, Month) in (select Id, max(Month)-1 from employee2 group by Id)
	or (Id, Month) in (select Id, max(Month)-2 from employee2 group by Id)
	or (Id, Month) in (select Id, max(Month)-3 from employee2 group by Id)) as b where a.Id=b.Id and b.Month<=a.Month) as Salary
from employee2 as a) c
where Salary is not null and  (Id, Month) not in (select Id, max(Month) from employee2 group by Id);

### 601 Human Traffic of Stadium (Hard)
select * from stadium;
# Question: Display the records which have 3 or more consecutive rows and the amount of people more than 100 (inclusive).
# Method One:
select * from stadium where id >= any (
select id from (select a.id, a.visit_date as day1, a.people, 
(select count(b.people) from stadium as b where datediff(b.visit_date,a.visit_date)=1 and a.people>=100 and b.people>=100) as day2,
(select count(c.people) from stadium as c where datediff(c.visit_date,a.visit_date)=2 and a.people>=100 and c.people>=100) as day3
from stadium as a) d where day2=1 and day3=1) and
 id <= any (
select id+3 from (select a.id, a.visit_date as day1, a.people, 
(select count(b.people) from stadium as b where datediff(b.visit_date,a.visit_date)=1 and a.people>=100 and b.people>=100) as day2,
(select count(c.people) from stadium as c where datediff(c.visit_date,a.visit_date)=2 and a.people>=100 and c.people>=100) as day3
from stadium as a) d where day2=1 and day3=1);

# Method two:
# Step one:
select * from stadium as a, stadium as b, stadium as c 
where datediff(b.visit_date, a.visit_date)=1 and datediff(c.visit_date,b.visit_date)=1 and a.people>=100 and b.people>100 and c.people>100;
# Step two:
select * from stadium 
where id in (select a.id from stadium as a, stadium as b, stadium as c 
where datediff(b.visit_date, a.visit_date)=1 and datediff(c.visit_date,b.visit_date)=1 and a.people>=100 and b.people>100 and c.people>100)
or id in (select b.id from stadium as a, stadium as b, stadium as c 
where datediff(b.visit_date, a.visit_date)=1 and datediff(c.visit_date,b.visit_date)=1 and a.people>=100 and b.people>100 and c.people>100)
or id in (select c.id from stadium as a, stadium as b, stadium as c 
where datediff(b.visit_date, a.visit_date)=1 and datediff(c.visit_date,b.visit_date)=1 and a.people>=100 and b.people>100 and c.people>100);

# Better version for method two:
select distinct a.* from stadium as a, stadium as b, stadium as c 
where (
	(datediff(b.visit_date, a.visit_date)=1 and datediff(c.visit_date,a.visit_date)=2) or # a is the first day
    (datediff(a.visit_date, b.visit_date)=1 and datediff(c.visit_date, a.visit_date)=1) or # a is the second day
    (datediff(a.visit_date, b.visit_date)=1 and datediff(a.visit_date,c.visit_date)=2)) # a is the third day
and a.people>=100 and b.people>100 and c.people>100
order by 1;

# Better version based on method one:
select * from stadium where 
id >= any (select a.id from stadium as a, stadium as b, stadium as c 
where datediff(b.visit_date, a.visit_date)=1 and datediff(c.visit_date,b.visit_date)=1 and a.people>=100 and b.people>100 and c.people>100) 
and
id <= any (select a.id+3 from stadium as a, stadium as b, stadium as c 
where datediff(b.visit_date, a.visit_date)=1 and datediff(c.visit_date,b.visit_date)=1 and a.people>=100 and b.people>100 and c.people>100);

# 615 Average Salary: Departments VS Company (Hard)
select * from salary;
select * from employee3;
# Question: Display the comparison result (higher/lower/same) of the average salary of employees in a department to the company's average salary (By Month)
# Example (in March)
# The average salary for company is (9000+6000+10000)/3 = 8333
# The average salary for department ‘2’ is (6000+10000)/2 = 8000, which is the average of employee_id ‘2’ and ‘3’. So the comparison result is ‘lower’ since 8000 < 8333.33

select DATE_FORMAT(c.date1,"%Y-%m") as pay_month, c.department_id, 
case when d.avg_month>avg_dept_month then "higher" when d.avg_month=avg_dept_month then "same" else "lower" end as comparison
from
(select a.pay_date as date1, b.department_id, avg(amount) as avg_dept_month from salary as a left join employee3 as b on a.employee_id=b.employee_id group by pay_date, department_id) as c 
left join 
(select a.pay_date as date2, avg(amount) as avg_month from salary as a left join employee3 as b on a.employee_id=b.employee_id group by pay_date) as d
on c.date1=d.date2;

# 618 Students Report By Geography (Hard)
select * from geography;
# Question: Pivot the continent column in this table so that each name is sorted alphabetically and displayed underneath its corresponding continent. 
# --- The output headers should be America, Asia and Europe respectively. 
# --- It is guaranteed that the student number from America is no less than either Asia or Europe.

# Step one: 
select a.name, continent, (select count(b.name) from geography as b where a.continent=b.continent) as id from geography as a order by 2; # Note: We need add a.name>b.name to distinguish the name
select a.name, continent, (select count(b.name) from geography as b where a.name>b.name and a.continent=b.continent) as id from geography as a order by 2;

# Step two:
select
max(case when continent="America" then name end) as America ,
max(case when continent="Asia" then name end) as Asia ,
max(case when continent="Europe" then name end) as Europe from
(select a.name, continent, (select count(b.name) from geography as b where a.name>b.name and a.continent=b.continent) as id from geography as a) c
group by c.id;

### 1097 Game Play Analysis V (Hard)
select * from activity;
# Question: Reports for each install date, the number of players that installed the game on that day and the day 1 retention.
# --- We define the install date of a player to be the first login day of that player.
# --- We also define day 1 retention of some date X to be the number of players whose install date is X and they logged back in on the day right after X, divided by the number of players whose install date is X, rounded to 2 decimal places.
# Method one:
select player_id, min(event_date) as date from activity group by player_id;

select a.date, round(count(b.player_id) / count(a.player_id),2) as retention_rate from (select player_id, min(event_date) as date from activity group by player_id) a 
left join (select player_id, event_date - interval 1 day from activity where (player_id, event_date) in (select player_id, event_date+1 from activity)) as b
on a.player_id=b.player_id group by a.date;

# Method two:
select a.*, b.* from (select distinct player_id, min(event_date) as date1, count(*) as count from activity group by player_id) as a left join activity as b on a.date1 + interval 1 day=b.event_date and a.player_id=b.player_id;

select a.date1, round(count(b.event_date) / a.count, 2) as retention_rate from
(select distinct player_id, min(event_date) as date1, count(*) as count from activity group by player_id) as a left join activity as b on a.date1 + interval 1 day=b.event_date and a.player_id=b.player_id
group by a.date1, a.count;

### 1127 User Purchase Platform (Hard)
select * from spending;
# Question: Find the total number of users and the total amount spent using mobile only, desktop only and both mobile and desktop together for each date.
# Method one:
select spend_date, "desktop" as platform, count(distinct user_id) as total_user, sum(amount) as total_amount from spending where (spend_date, user_id) not in (select spend_date, user_id from spending where platform = "mobile") group by spend_date
union all
select spend_date, "mobile" as platform, count(distinct user_id) as total_user, sum(amount) as total_amount from spending where (spend_date, user_id) not in (select spend_date, user_id from spending where platform = "desktop") group by spend_date
union all
select spend_date, "both" as platform, count(distinct user_id) as total_user, sum(amount) as total_amount from spending where (spend_date, user_id) 
in (select spend_date,user_id from spending group by spend_date, user_id having count(distinct platform) > 1) group by spend_date
union all 
select distinct spend_date, "both" as platform, 0 as total_user, 0 as total_amount from spending where spend_date not in (select spend_date from spending group by spend_date, user_id having count(distinct platform) > 1);

# Method two:
# Second part -> only "both" part
select a.spend_date, "both" as platform, ifnull(b.amount,0) as total_amount, ifnull(b.count1,0) as total_users from 
(select distinct spend_date from spending) as a left join (select spend_date, "both" as platform, count(distinct user_id) as count1, sum(amount) as amount from spending group by spend_date, user_id having count(platform) = 2) b
on a.spend_date = b.spend_date;

### 1159 Market Analysis II (Hard)
select * from users2;
select * from orders2;
select * from items;
# Question: Find for each user, whether the brand of the second item (by date) they sold is their favorite brand. 
# --- If a user sold less than two items, report the answer for that user as no.
# It is guaranteed that no seller sold more than one item on a day.
select c.user_id, d.order_date, c.favorite_brand, d.item_brand, case when c.favorite_brand = d.item_brand then  "yes" else "no" end as 2nd_item_fav_brand 
from users2 as c left join 
(select a.*, (select count(b.order_date) from orders2 as b where a.order_date>=b.order_date and a.seller_id = b.seller_id) as date, b.item_brand from orders2 as a left join items as b on a.item_id = b.item_id) as d
on c.user_id = d.seller_id and d.date = 2;

### 1194 Tournament Winners (Hard)
select * from players;
select * from matches;
# Find the winner in each group.
# --- The winner in each group is the player who scored the maximum total points within the group. 
# --- In the case of a tie, the lowest player_id wins.
# Method 1:
select group_id, min(player_id) from (
	select player, sum(score) as score from ((select first_player as player, first_score as score from matches) union all (select second_player as player, second_score as score from matches) ) a group by player) b 
    left join players as c on b.player = c.player_id
where (c.group_id, b.score) in 
	(select c.group_id, max(b.score) from (
		select player, sum(score) as score from ((select first_player as player, first_score as score from matches) union all (select second_player as player, second_score as score from matches) ) a group by player) b 
        left join players as c on b.player = c.player_id
	group by group_id) 
group by group_id;

# Method 2: similar method
# Step one:
(select first_player as player_id, first_score as score from matches) union all (select second_player as player_id, second_score as score from matches);

# Step two: join table "players" and get the group_id
select a.player_id,sum(a.score) as sum, b.group_id from
((select first_player as player_id, first_score as score from matches) union all (select second_player as player_id, second_score as score from matches)) as a
left join players as b on a.player_id=b.player_id group by b.group_id, a.player_id;

# Step three: Get the biggest sum for each group
select max(a.score) as max, b.group_id from
((select first_player as player_id, first_score as score from matches) union all (select second_player as player_id, second_score as score from matches)) as a 
left join players as b on a.player_id=b.player_id group by b.group_id;

# Step four: Add the step 3 as a filter to step 2
select a.player_id,sum(a.score) as sum, b.group_id from 
	((select first_player as player_id, first_score as score from matches) union all (select second_player as player_id, second_score as score from matches)) as a # step one
	left join players as b on a.player_id=b.player_id group by b.group_id, a.player_id  # step two
having (sum, b.group_id) in (select max(a.score) as max, b.group_id from # step four
	((select first_player as player_id, first_score as score from matches) union all (select second_player as player_id, second_score as score from matches)) as a 
    left join players as b on a.player_id=b.player_id group by b.group_id); # step three

# Step five: Add another group based on step four
select d.group_id, min(d.player_id) as player_id from
	(select a.player_id,sum(a.score) as sum, b.group_id from
		((select first_player as player_id, first_score as score from matches) union all (select second_player as player_id, second_score as score from matches)) as a
		left join players as b on a.player_id=b.player_id group by b.group_id, a.player_id 
	having (sum, b.group_id) in (select max(a.score) as max, b.group_id from
		((select first_player as player_id, first_score as score from matches) union all (select second_player as player_id, second_score as score from matches)) as a 
        left join players as b on a.player_id=b.player_id group by b.group_id)) as d 
group by d.group_id;

### 1225 Report Continuous Dates (Hard)
select * from failed;
select * from succeeded;
# Question: Generate a report of period_state for each continuous interval of days in the period from 2019-01-01 to 2019-12-31.
# --- A system is running one task every day. Every task is independent of the previous tasks. The tasks can fail or succeed
# column 1: fail / succeed, column 2: start_date, column 3: end_date
# Method 1:
# Next time try to union all first and then group by state, start date
(select "success" as state, a.success_date as start_date, min(b.success_date) as end_date from succeeded as a, succeeded as b 
where (year(a.success_date) = 2019 and (a.success_date - interval 1 day) not in (select success_date from succeeded) or a.success_date = '2019-01-01')
and (b.success_date>= a.success_date) and (b.success_date + interval 1 day) not in (select success_date from succeeded) group by state, a.success_date)

union all

(select "failed" as state, a.fail_date as start_date, min(b.fail_date) as end_date from failed as a, failed as b 
where (year(a.fail_date) = 2019 and (a.fail_date - interval 1 day) not in (select fail_date from failed) or a.fail_date = '2019-01-01')
and (b.fail_date>= a.fail_date) and (b.fail_date + interval 1 day) not in (select fail_date from failed) group by state, a.fail_date) order by 2;

# Method 2:
select state, start_date, end_date from (
select state, max(start_date) as start_date, max(end_date) as end_date,
case when @prev=state then @rank:=@rank else @rank:=@rank+1 end as rnk,
@prev := state as prev
from (
select state, date,
case 
	when state='success' and date3 not in (select success_date from succeeded where year(success_date)=2019) then date 
	when state='failed' and date3 not in (select fail_date from failed where year(fail_date)=2019) then date 
	else null end as start_date,
case 
	when state='success' and date2 not in (select success_date from succeeded where year(success_date)=2019) then date 
	when state='failed' and date2 not in (select fail_date from failed where year(fail_date)=2019) then date 
	else null end as end_date
from
(select date, date_add(date, interval 1 day) as date2, date_add(date, interval -1 day) as date3, state
from (select fail_date as date, "failed" as state from failed union all select success_date as date, "success" as state from succeeded) a
where year(date)=2019) a
order by date) b, (select @rank:= 0, @prev := null) c group by state, rnk) c order by 2;

### 1336 Number of Transactions per Visit (Hard)
select * from visits;
select * from transactions3;
# Question: Find how many users visited the bank and didn't do any transactions, how many visited the bank and did one transaction and so on.
# For transactions_count = 0, The visits (1, "2020-01-01"), (2, "2020-01-02"), (12, "2020-01-01") and (19, "2020-01-03") did no transactions so visits_count = 4.
# For transactions_count = 1, The visits (2, "2020-01-03"), (7, "2020-01-11"), (8, "2020-01-28"), (1, "2020-01-02") and (1, "2020-01-04") did one transaction so visits_count = 5.
# For transactions_count = 2, No customers visited the bank and did two transactions so visits_count = 0.
# For transactions_count = 3, The visit (9, "2020-01-25") did three transactions so visits_count = 1.
# For transactions_count >= 4, No customers visited the bank and did more than three transactions so we will stop at transactions_count = 3;

# Method 1:
# Step 1:
select a.user_id, a.visit_date, b.transaction_date from visits as a left join transactions3 as b on a.user_id=b.user_id and b.transaction_date = a.visit_date;
# Step 2:
select a.user_id, a.visit_date, count(b.transaction_date) as count from visits as a left join transactions3 as b on a.user_id=b.user_id and b.transaction_date = a.visit_date group by a.user_id, a.visit_date;
# Step 3: 
select count, count(*) from (
select a.user_id, a.visit_date, count(b.transaction_date) as count from visits as a left join transactions3 as b on a.user_id=b.user_id and b.transaction_date = a.visit_date group by a.user_id, a.visit_date) a 
group by count;
# Step 4:
(select @rank := @rank+1 as rnk from transactions3, (select @rank := -1) r);
# Step 5: 
select c.rnk as transactions_count, ifnull(d.cc,0) as visits_count from ((select @rank := @rank+1 as rnk from transactions3, (select @rank := -1) r)) c left join (
select count, count(*) as cc from (
select a.user_id, a.visit_date, count(b.transaction_date) as count from visits as a left join transactions3 as b on a.user_id=b.user_id and b.transaction_date = a.visit_date group by a.user_id, a.visit_date) a 
group by count) d
on c.rnk = d.count
having transactions_count <= (
select max(count) from ( # from step 2
select a.user_id, a.visit_date, count(b.transaction_date) as count from visits as a left join transactions3 as b on a.user_id=b.user_id and b.transaction_date = a.visit_date group by a.user_id, a.visit_date) a);

# Method 2
select x.rnk as transactions_count, ifnull(y.count,0) as visits_count from
(select @rank := @rank+1 as rnk from transactions3, (select @rank := -1) r) x
left join
(select c.visit, count(visit) as count from (
select a.user_id, b.transaction_date, (count(b.user_id)) as visit from visits as a left join transactions3 as b on a.user_id=b.user_id and visit_date=transaction_date
group by a.user_id, b.transaction_date order by visit) c group by c.visit) as y on x.rnk=y.visit where x.rnk <= (select max(d.visit) from (select a.user_id, b.transaction_date, (count(b.user_id)) as visit from visits as a left join transactions3 as b on a.user_id=b.user_id and visit_date=transaction_date
group by a.user_id, b.transaction_date) d);

### 1369 Get the Second Most Recent Activity (Hard)
select * from useractivity;
# Question: Find the second most recent avtivity for each user
# --- If the user only has one activity, return that activity

# Method 1
select * from useractivity where (username, endDate) in (
select username, max(endDate) from (
select a.*, (select count(b.endDate) from useractivity as b where a.username = b.username and b.endDate <= a.endDate) as act from useractivity as a) c where act <= 2
group by username);

# Method 2:
select username, activity, startDate, endDate from (
select username, activity, startDate, endDate, (select count(b.username) from useractivity as b where b.startDate<=a.startDate and a.username=b.username) as counts1
from useractivity as a) c where (c.username, c.counts1) in (select username, if(count(*)=1,1,2) as counts2 from useractivity group by username);

### 1384 Total Sales Amount by Year (Hard)
select * from product5; 
select * from sales3;
# Question: Find the total sales for each product in each year (2018-2020)
# Method 1
select a.product_id, b.product_name, a.report_year, a.total_amount from (
select product_id, "2018" as report_year, 
case when year(period_start) = 2018 and year(period_end) = 2018 then (datediff(period_end, period_start)+1) * average_daily_sales
		 when year(period_start) = 2018 and year(period_end) > 2018 then (datediff("2018-12-31", period_start)+1) * average_daily_sales
         else 0 end as total_amount from sales3
union all
select product_id, "2019" as report_year,
case when year(period_start) = 2018 and year(period_end) = 2019 then (datediff(period_end, "2019-01-01")+1) * average_daily_sales
		 when year(period_start) = 2018 and year(period_end) = 2020 then 365 * average_daily_sales
		 when year(period_start) = 2019 and year(period_end) = 2019 then (datediff(period_end, period_start)+1) * average_daily_sales
	     when year(period_start) = 2019 and year(period_end) = 2020 then (datediff("2019-12-31", period_start)+1) * average_daily_sales
         else 0 end as total_amount from sales3
union all
select product_id, "2020" as report_year,
case when year(period_start) < 2020 and year(period_end) = 2020 then (datediff(period_end, "2020-01-01")+1) * average_daily_sales
 	     when year(period_start) = 2020 and year(period_end) = 2020 then (datediff(period_end, period_start)+1) * average_daily_sales
         else 0 end as total_amount from sales3) a
left join product5 as b on a.product_id = b.product_id having total_amount != 0;
         
 # Method 2
select c.product_id, d.product_name, c.report_year, (c.days+1) * c.average_daily_sales as total_amount
from (
(select product_id, average_daily_sales, "2018" as report_year,
case 
	when year(period_start) = 2018 and year(period_end) = 2018 then datediff(period_end, period_start)
	when year(period_start) = 2018 and year(period_end) > 2018 then datediff("2018-12-31",period_start)
    else null  end as days from sales3)
union all
(select product_id, average_daily_sales, "2019" as report_year,
case 
	when year(period_start) = 2018 and year(period_end) = 2019 then datediff(period_end, "2019-01-01")
	when year(period_start) = 2018 and year(period_end) = 2020 then 365-1
	when year(period_start) = 2019 and year(period_end) = 2019 then datediff(period_end, period_start)
	when year(period_start) = 2019 and year(period_end) = 2020 then datediff("2019-12-31", period_start)
    else null end as days from sales3)
union all
(select product_id, average_daily_sales, "2020" as report_year,
case 
	when year(period_start) < 2020 and year(period_end) = 2020 then datediff(period_end, "2020-01-01")
    when year(period_start) = 2020 and year(period_end) = 2020 then datediff(period_end, period_start)
	when year(period_start) = 2020 and year(period_end) > 2020 then datediff("2020-12-31",period_start)
    else null end as days from sales3)
) as c left join product5 as d on c.product_id=d.product_id
where c.days is not null
order by 1,3;

### 1412 Find the Quiet Students in All Exams (Hard)
select * from student;
select * from exam;
# Question: Report the students (student_id, student_name) being "quiet" in ALL exams.
# --- A "quite" student is the one who took at least one exam and didn't score neither the high score nor the low score.
# Method 1:
select * from student where student_id in (select student_id from exam) 
and student_id not in (
	select student_id from exam 
	where (exam_id, score) in (select exam_id, max(score) from exam group by exam_id) 
    or (exam_id, score) in (select exam_id, min(score) from exam group by exam_id)
    );

# Method 2: similar
select distinct a.student_id, b.student_name from exam as a left join student as b on a.student_id=b.student_id
where a.student_id not in (
select student_id from exam where 
(exam_id, score) in (select exam_id, max(score) from exam group by exam_id) or
(exam_id, score) in (select exam_id, min(score) from exam group by exam_id));
